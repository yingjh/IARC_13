/************************************************************************
* Copyright(c) 2014  YING Jiahang
* All rights reserved.
*
* File:	odom_estimation_node.h
* Brief: odom estimation node for ROS UKF
* Version: 1.0
* Author: YING Jiahang
* Email: yingjiahang@gmail.com
* Date:	2014/6/19 22:00
* History: modified from YUYUN and YANGSHUO pidctrl
************************************************************************/
// ros
#include "ros/ros.h"
#include "geometry_msgs/Quaternion.h"
// eigen
#include <eigen3/Eigen/Dense>
// pid
#include "pid.h"
// msg
#include <ukftest/ukfData.h>

//YU YUN
#include "math_basic.h"
#include "math_vector.h"
#include "math_matrix.h"
#include "math_quaternion.h"
#include "math_rotation.h"

using namespace std;
using namespace ros;
// Ros
ros::Subscriber ukfsub;
ros::Publisher ctrlpub;
 
// PID related variables
PID *ctrl_x, *ctrl_y, *ctrl_z, *ctrl_yaw;
PID *ctrl_dx, *ctrl_dy, *ctrl_dz, *ctrl_dyaw;
PID *ctrl_ddx, *ctrl_ddy, *ctrl_ddz;
double Kp_pos, Kp_vel, Kp_acc,
       Kd_pos, Kd_vel, Kd_acc,
       Ki_pos, Ki_vel, Ki_acc;
double pid_gain;
double controlLimit;
float target_velX, target_velY, target_velZ;
float target_accX, target_accY, target_accZ;
float target_angleX, target_angleY, target_angleZ;
const float targetPosition[3] = {0.0,0.0,15};
const float targetOrientation[4] = {0.0, 0.0, -1.0, 0.0}; // w x y z 
const float targetYaw = 0.0;
vector3f acc_t, acc_c, acc_b; // final control variables
vector4f controlInput, q_tc_filter;
matrix3f R_tc_filter, R_tmp ,R_bc;
bool is_debug_on;
// variables related to generate debug messages
float d_pval, d_ival, d_dval, d_error;

void ukfCallback(const ukftest::ukfData& ukf);

int main (int argc, char** argv)
{
	// ros init and parameters retrieve
	ros::init(argc, argv, "board_controller");
	ros::NodeHandle nh;
	ros::NodeHandle pnh("~");

	pnh.param("is_debug_on", is_debug_on, true);
	pnh.param("Kp_pos", Kp_pos, double(0.90));
	pnh.param("Ki_pos", Ki_pos, double(0.15));
	pnh.param("Kd_pos", Kd_pos, double(0.45));

	pnh.param("Kp_vel", Kp_vel, double(1.80));
	pnh.param("Ki_vel", Ki_vel, double(0.00));
	pnh.param("Kd_vel", Kd_vel, double(0.34));

	pnh.param("Kp_acc", Kp_acc, double(0.27));
	pnh.param("Ki_acc", Ki_acc, double(0.20));
	pnh.param("Kd_acc", Kd_acc, double(0.06));
	pnh.param("pid_gain", pid_gain, double(1.0));

	pnh.param("controlLimit", controlLimit, double(5.0));
	
	matrix3f_set_value(R_bc, 0, -1, 0,
				 1,  0, 0,
				 0,  0, 1);
	//init pid controllers 
	ctrl_x = new PID(Kp_pos, Ki_pos, Kd_pos, -200, 200, -950, 950); ctrl_x -> set_point(targetPosition[0]);
	ctrl_y = new PID(Kp_pos, Ki_pos, Kd_pos, -200, 200, -950, 950); ctrl_y -> set_point(targetPosition[1]);
	ctrl_z = new PID(Kp_pos, Ki_pos, Kd_pos, -200, 200, -950, 950); ctrl_z -> set_point(targetPosition[2]);

	ctrl_dx = new PID(Kp_vel, Ki_vel, Kd_vel, -30, 30, -800, 800); 
	ctrl_dy = new PID(Kp_vel, Ki_vel, Kd_vel, -30, 30, -800, 800); 
	ctrl_dz = new PID(Kp_vel, Ki_vel, Kd_vel, -200, 200, -800, 800); 

	ctrl_ddx = new PID(Kp_acc, Ki_acc, Kd_acc, -200, 200, -800, 800); 
	ctrl_ddy = new PID(Kp_acc, Ki_acc, Kd_acc, -200, 200, -800, 800); 
	ctrl_ddz = new PID(Kp_acc, Ki_acc, Kd_acc, -200, 200, -800, 800); 


	ctrl_yaw = new PID(0.8, 0.0, 1.0, -200, 200, -15, 15); ctrl_yaw -> set_point(targetYaw);
	
	ctrlpub = nh.advertise<geometry_msgs::Quaternion>("/board_ctrl",10);
	ukfsub = nh.subscribe("/odom_estimation_node/odom_combined", 10, ukfCallback);
	
	cout<< "uav controller start!"<<endl;
	ros::spin();
	cout<< "uav controller shutdown!"<<endl;
	return 1;
}    

void ukfCallback(const ukftest::ukfData& ukf)
{
	cout<< "call ukf ctrl!"<<endl;
	float delta_t = ukf.dt;

	// until here, ukf-> state_post should contain a good estimation of T_tc
	// ready to generate control info
	target_velX = ctrl_x -> update(ukf.xyz.x, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control roll
	target_velY = ctrl_y -> update(ukf.xyz.y, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control pitch
	target_velZ = ctrl_z -> update(ukf.xyz.z, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control vel

	ctrl_dx -> set_point(target_velX);
	ctrl_dy -> set_point(target_velY);
	ctrl_dz -> set_point(target_velZ);

	target_accX = ctrl_dx -> update(ukf.v.x, delta_t, &d_error, &d_pval, &d_ival, &d_dval); //control roll
	target_accY = ctrl_dy -> update(ukf.v.y, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control pitch
	target_accZ = ctrl_dz -> update(ukf.v.z, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control vel

	ctrl_ddx -> set_point(target_accX);
	ctrl_ddy -> set_point(target_accY);
	ctrl_ddz -> set_point(target_accZ);

	target_angleX = ctrl_ddx -> update(ukf.a.x, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control vel
	target_angleY = ctrl_ddy -> update(ukf.a.y, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control vel
	target_angleZ = ctrl_ddz -> update(ukf.a.z, delta_t, &d_error, &d_pval, &d_ival, &d_dval);   //control vel

	acc_t[0] = target_angleX + target_accX;
	acc_t[1] = target_angleY + target_accY;
	acc_t[2] = target_angleZ + target_accZ;

	// transform acc_t to acc_b
	q_tc_filter[0] = ukf.q.w;
	q_tc_filter[1] = ukf.q.x;
	q_tc_filter[2] = ukf.q.y;
	q_tc_filter[3] = ukf.q.z;

	quat_to_DCM(R_tc_filter, q_tc_filter);

	get_matrix3f_transpose(R_tmp, R_tc_filter);
	matrix3f_multi_vector3f(acc_c, R_tmp, acc_t); //acc_c = R_tc_filter'*acc_t;
	matrix3f_multi_vector3f(acc_b, R_bc, acc_c); //acc_b = R_bc*acc_c;

	// from acceleration to angle
	controlInput[0] = pid_gain*atan2(-acc_b[0], 980.0)/M_PI*180; //body x , pitch
	controlInput[1] = pid_gain*atan2(acc_b[1], 980.0)/M_PI*180; //body y , roll
	controlInput[2] = pid_gain*acc_b[2];                        //body z , vel

	controlInput[3] = 0;   //assume no yaw control

	// constrain control input
	if (controlInput[0] > controlLimit) 
	controlInput[0] = controlLimit;
	if (controlInput[0] < -controlLimit)
	controlInput[0] = -controlLimit;
	if (controlInput[1] > controlLimit) 
	controlInput[1] = controlLimit;
	if (controlInput[1] < -controlLimit)
	controlInput[1] = -controlLimit;
	
	geometry_msgs::Quaternion outMsg;

	outMsg.z = (int)(controlInput[3]*100);         //yaw_rate  
	outMsg.x = (int)(controlInput[0]*100);         //pitch
	outMsg.y = (int)(controlInput[1]*100);         //roll
	outMsg.w = (int)(controlInput[2]*100);         //vel
	ctrlpub.publish(outMsg);
	if(is_debug_on)
	{
		cout<< "Out put massage: \n";
		cout<< "yaw rate:" << outMsg.z << endl;
		cout<< "pitch   :" << outMsg.x << endl;
		cout<< "roll    :" << outMsg.y << endl;
		cout<< "vel     :" << outMsg.w << endl;
	}
}




